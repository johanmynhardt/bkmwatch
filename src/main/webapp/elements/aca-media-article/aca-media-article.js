'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'aca-media-article',

    properties: {
      contentKey: {
        type: String,
        value: undefined
      },

      article: {
        type: Object,
        value: undefined
      },

      fields: {
        type: Array,
        value: []
      },

      media: {
        type: Array,
        value: []
      },

      _hasMedia: {
        type: Boolean,
        value: false,
        notify: true
      }

    },

    audioImage: function audioImage() {
      return 'images/sonata.png';
    },

    lookup: function lookup(contentKey) {
      if (_.hasIn(app, 'params.contentKey')) {
        this.set('contentKey', app.params.contentKey);
      } else if (contentKey) {
        page.redirect('/article/' + contentKey);
        return;
      } else {
        console.warn('Could not get contentKey from either parameter or path.');
        return;
      }

      console.debug('lookup: ', this.contentKey);
      this.contentKeyChanged(this.contentKey);
    },

    contentKeyChanged: function contentKeyChanged(newContentKey) {
      app.showToast('new contentKey: {contentKey}', { contentKey: newContentKey });

      this.reset();

      app.lookup(newContentKey, function (response) {
        console.info('Got lookup response: ', response);

        this.article = response.data.content[0].article;
        this.metaData = response.data.content[0].article.metaData;

        var urlForReference = function urlForReference(mediaItem) {
          if (mediaItem.mediaType === 'Image') {
            return mediaItem.references[0].imageURL;
          } else if (mediaItem.mediaType === 'Audio') {
            return mediaItem.references[0].url;
          } else if (mediaItem.mediaType === 'Video') {
            return mediaItem.references[0].url;
          }
        };

        var pushToMedia = function pushToMedia(host) {
          return function (mediaItem) {
            console.info('pushTomedia: host: %o', host);
            if (!_.isEmpty(mediaItem.references)) {
              var item = {
                caption: mediaItem.caption,
                type: mediaItem.mediaType,
                url: urlForReference(mediaItem)
              };
              console.info('pushing media item: ', item);
              host.push('media', item);
            }
          };
        };

        var pushToTuple = function pushToTuple(host) {
          return function (key) {
            console.info('pushToTuple: host: %o, key: %s', host, key);

            var value = host.article[key];

            if (value !== undefined && value !== null && !_.isEmpty(value)) {
              host.push('fields', { key: key, value: value });
              if ('mediaList' === key) {
                _.each(value.mediaItems, pushToMedia(host));
              }
            }
          };
        };

        _.keys(this.article).forEach(pushToTuple(this));

        this.set('_hasMedia', !_.isEmpty(this.media));
      }.bind(this), function (err) {
        app.showToast('Error during lookup: {err}', { err: err }, true);
      });
    },

    reset: function reset() {
      this.article = undefined;
      this.fields = [];
      this.media = [];
      this._hasMedia = false;
    },

    togglePlay: function togglePlay(e) {
      var audioPlayer = Polymer.dom(e.target.parentNode).querySelector('audio');
      console.log('toggle audio play: ', audioPlayer);

      if (audioPlayer.paused) {
        audioPlayer.play();
      } else {
        audioPlayer.pause();
      }
    },

    onTogglePlay: function onTogglePlay(e) {

      var stylePauseIcon = 'av:pause-circle-outline';
      var stylePlayIcon = 'av:play-circle-outline';
      var mediaControlId = '#mediaControl';
      var mediaButtonId = 'paper-icon-button#mediaButton';

      var findNodeUp = function findNodeUp(id, node) {
        var traverseUp = function traverseUp(node) {
          if (node.parentNode === null) {
            return null;
          } else {
            return node.id === id ? node : traverseUp(node.parentNode);
          }
        };
        return traverseUp(node);
      };

      var toggleSteps = function toggleSteps(control, button) {
        if (!(control && button)) {
          console.error('Both control and button is required.');
          return;
        }

        if (control.paused) {
          control.play();
        } else {
          control.pause();
        }
        Polymer.dom(button).setAttribute('icon', control.paused ? stylePlayIcon : stylePauseIcon);
      };

      var mediaContainer = findNodeUp('mediaContainer', e.target);

      if (mediaContainer) {
        var mediaControl = Polymer.dom(mediaContainer).querySelector(mediaControlId);
        var mediaButton = Polymer.dom(mediaContainer).querySelector(mediaButtonId);
        toggleSteps(mediaControl, mediaButton);
      }
    },

    _isType: function _isType(item, type) {
      return item.type === type;
    },

    _isAudioOrVideo: function _isAudioOrVideo(item) {
      return _.some(['Audio', 'Video'], function (t) {
        return t === item.type;
      });
    },

    _isImage: function _isImage(item) {
      return this._isType(item, 'Image');
    },

    _isAudio: function _isAudio(item) {
      return this._isType(item, 'Audio');
    },

    _isVideo: function _isVideo(item) {
      return this._isType(item, 'Video');
    }

  });
})();
//# sourceMappingURL=data:application/json;base64,
