'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'aca-meta-dialog-meta-content',

    properties: {
      source: {
        type: String,
        value: undefined
      },
      infoUrl: {
        type: String,
        value: ''
      },
      metaResponse: {
        type: Object,
        value: {},
        observer: '_metaResponseChanged'
      },
      _profiles: {
        type: Array,
        value: function value() {
          return [{ label: 'x' }];
        }
      },
      _currentProfile: {
        type: Object,
        value: {}
      },

      selectedTab: {
        type: Number,
        value: 0,
        observer: '_tabSelected'
      },

      /**
       * Response cache: {urlAsKey: responseAsValue}
       */
      _cache: {
        type: Object,
        value: {}
      }
    },

    observers: ['sourceChanged(source)'],

    sourceChanged: function sourceChanged(newValue) {
      if (app.config) {
        if (!_.includes(_.keys(this._cache), newValue)) {
          console.debug('%s not in cache. Updating...', newValue);

          var values = {
            source: newValue,
            meta: true,
            format: 'raw'
          };

          this.infoUrl = app.multiValueUrl(app.bootstrap.baseIrsMetaTemplate, values);

          this.metaResponse = { meta: { data: 'Loading...' } };
          this.$.metaAjax.generateRequest();
        } else {
          this.set('metaResponse', this._cache[newValue]);
        }
      }
    },

    keyFrom: function keyFrom(entry) {
      return entry[0];
    },

    valueFrom: function valueFrom(entry) {
      return entry[1];
    },

    _metaResponseChanged: function _metaResponseChanged(newValue) {
      if (!_.isEqual(newValue, { meta: { data: 'Loading...' } })) {
        if (this.source && !_.includes(this._cache, this.source)) {
          this._cache[this.source] = newValue;
        }
      }

      var ignored = ['SourceFile'];

      var shouldExclude = function shouldExclude(key) {
        return _.includes(ignored, key);
      };

      var getProfile = function getProfile(key) {
        return { label: key, data: _.toPairs(newValue[key]) };
      };

      var profiles = _.map(_.filter(_.keys(newValue), _.negate(shouldExclude)), getProfile);

      this.set('_profiles', profiles);
      this.set('selectedTab', 0);
      this.set('_currentProfile', this._profiles[this.selectedTab]);

      this.fire('iron-signal', { name: 'meta-data-received', data: newValue });
    },

    _tabSelected: function _tabSelected(e) {
      console.log('tab selected: ', e);
      this.set('_currentProfile', this._profiles[this.selectedTab]);
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZW1lbnRzL2FjYS1tZXRhLWRpYWxvZy9hY2EtbWV0YS1kaWFsb2ctbWV0YS1jb250ZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsQ0FBQyxZQUFXO0FBQ047O0FBRUEsVUFBUTtBQUNOLFFBQUksOEJBREU7O0FBR04sZ0JBQVk7QUFDVixjQUFRO0FBQ04sY0FBTSxNQURBO0FBRU4sZUFBTztBQUZELE9BREU7QUFLVixlQUFTO0FBQ1AsY0FBTSxNQURDO0FBRVAsZUFBTztBQUZBLE9BTEM7QUFTVixvQkFBYztBQUNaLGNBQU0sTUFETTtBQUVaLGVBQU8sRUFGSztBQUdaLGtCQUFVO0FBSEUsT0FUSjtBQWNWLGlCQUFXO0FBQ1QsY0FBTSxLQURHO0FBRVQsZUFBTyxpQkFBVztBQUNoQixpQkFBTyxDQUFDLEVBQUMsT0FBTyxHQUFSLEVBQUQsQ0FBUDtBQUNEO0FBSlEsT0FkRDtBQW9CVix1QkFBaUI7QUFDZixjQUFNLE1BRFM7QUFFZixlQUFPO0FBRlEsT0FwQlA7O0FBeUJWLG1CQUFhO0FBQ1gsY0FBTSxNQURLO0FBRVgsZUFBTyxDQUZJO0FBR1gsa0JBQVU7QUFIQyxPQXpCSDs7QUErQlY7OztBQUdBLGNBQVE7QUFDTixjQUFNLE1BREE7QUFFTixlQUFPO0FBRkQ7QUFsQ0UsS0FITjs7QUEyQ04sZUFBVyxDQUFDLHVCQUFELENBM0NMOztBQTZDTixtQkFBZSx1QkFBUyxRQUFULEVBQW1CO0FBQ2hDLFVBQUksSUFBSSxNQUFSLEVBQWdCO0FBQ2QsWUFBSSxDQUFDLEVBQUUsUUFBRixDQUFXLEVBQUUsSUFBRixDQUFPLEtBQUssTUFBWixDQUFYLEVBQWdDLFFBQWhDLENBQUwsRUFBZ0Q7QUFDOUMsa0JBQVEsS0FBUixDQUFjLDhCQUFkLEVBQThDLFFBQTlDOztBQUVBLGNBQUksU0FBUztBQUNYLG9CQUFRLFFBREc7QUFFWCxrQkFBTSxJQUZLO0FBR1gsb0JBQVE7QUFIRyxXQUFiOztBQU1BLGVBQUssT0FBTCxHQUFlLElBQUksYUFBSixDQUFrQixJQUFJLFNBQUosQ0FBYyxtQkFBaEMsRUFBcUQsTUFBckQsQ0FBZjs7QUFFQSxlQUFLLFlBQUwsR0FBb0IsRUFBQyxNQUFNLEVBQUMsTUFBTSxZQUFQLEVBQVAsRUFBcEI7QUFDQSxlQUFLLENBQUwsQ0FBTyxRQUFQLENBQWdCLGVBQWhCO0FBQ0QsU0FiRCxNQWFPO0FBQ0wsZUFBSyxHQUFMLENBQVMsY0FBVCxFQUF5QixLQUFLLE1BQUwsQ0FBWSxRQUFaLENBQXpCO0FBQ0Q7QUFDRjtBQUNGLEtBaEVLOztBQWtFTixhQUFTLGlCQUFTLEtBQVQsRUFBZ0I7QUFDdkIsYUFBTyxNQUFNLENBQU4sQ0FBUDtBQUNELEtBcEVLOztBQXNFTixlQUFXLG1CQUFTLEtBQVQsRUFBZ0I7QUFDekIsYUFBTyxNQUFNLENBQU4sQ0FBUDtBQUNELEtBeEVLOztBQTBFTiwwQkFBc0IsOEJBQVMsUUFBVCxFQUFtQjtBQUN2QyxVQUFJLENBQUMsRUFBRSxPQUFGLENBQVUsUUFBVixFQUFvQixFQUFDLE1BQU0sRUFBQyxNQUFNLFlBQVAsRUFBUCxFQUFwQixDQUFMLEVBQXdEO0FBQ3RELFlBQUksS0FBSyxNQUFMLElBQWUsQ0FBQyxFQUFFLFFBQUYsQ0FBVyxLQUFLLE1BQWhCLEVBQXdCLEtBQUssTUFBN0IsQ0FBcEIsRUFBMEQ7QUFDeEQsZUFBSyxNQUFMLENBQVksS0FBSyxNQUFqQixJQUEyQixRQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsVUFBTSxVQUFVLENBQUMsWUFBRCxDQUFoQjs7QUFFQSxVQUFNLGdCQUFnQixTQUFoQixhQUFnQixDQUFDLEdBQUQsRUFBUztBQUM3QixlQUFPLEVBQUUsUUFBRixDQUFXLE9BQVgsRUFBb0IsR0FBcEIsQ0FBUDtBQUNELE9BRkQ7O0FBSUEsVUFBTSxhQUFhLFNBQWIsVUFBYSxDQUFDLEdBQUQsRUFBUztBQUMxQixlQUFPLEVBQUMsT0FBTyxHQUFSLEVBQWEsTUFBTSxFQUFFLE9BQUYsQ0FBVSxTQUFTLEdBQVQsQ0FBVixDQUFuQixFQUFQO0FBQ0QsT0FGRDs7QUFJQSxVQUFJLFdBQVcsRUFBRSxHQUFGLENBQU0sRUFBRSxNQUFGLENBQVMsRUFBRSxJQUFGLENBQU8sUUFBUCxDQUFULEVBQTJCLEVBQUUsTUFBRixDQUFTLGFBQVQsQ0FBM0IsQ0FBTixFQUEyRCxVQUEzRCxDQUFmOztBQUVBLFdBQUssR0FBTCxDQUFTLFdBQVQsRUFBc0IsUUFBdEI7QUFDQSxXQUFLLEdBQUwsQ0FBUyxhQUFULEVBQXdCLENBQXhCO0FBQ0EsV0FBSyxHQUFMLENBQVMsaUJBQVQsRUFBNEIsS0FBSyxTQUFMLENBQWUsS0FBSyxXQUFwQixDQUE1Qjs7QUFFQSxXQUFLLElBQUwsQ0FBVSxhQUFWLEVBQXlCLEVBQUMsTUFBTSxvQkFBUCxFQUE2QixNQUFNLFFBQW5DLEVBQXpCO0FBQ0QsS0FsR0s7O0FBb0dOLGtCQUFjLHNCQUFTLENBQVQsRUFBWTtBQUN4QixjQUFRLEdBQVIsQ0FBWSxnQkFBWixFQUE4QixDQUE5QjtBQUNBLFdBQUssR0FBTCxDQUFTLGlCQUFULEVBQTRCLEtBQUssU0FBTCxDQUFlLEtBQUssV0FBcEIsQ0FBNUI7QUFDRDtBQXZHSyxHQUFSO0FBeUdELENBNUdMIiwiZmlsZSI6ImVsZW1lbnRzL2FjYS1tZXRhLWRpYWxvZy9hY2EtbWV0YS1kaWFsb2ctbWV0YS1jb250ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICBQb2x5bWVyKHtcbiAgICAgICAgaXM6ICdhY2EtbWV0YS1kaWFsb2ctbWV0YS1jb250ZW50JyxcblxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbmZvVXJsOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICB2YWx1ZTogJydcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1ldGFSZXNwb25zZToge1xuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgdmFsdWU6IHt9LFxuICAgICAgICAgICAgb2JzZXJ2ZXI6ICdfbWV0YVJlc3BvbnNlQ2hhbmdlZCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9wcm9maWxlczoge1xuICAgICAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBbe2xhYmVsOiAneCd9XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIF9jdXJyZW50UHJvZmlsZToge1xuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNlbGVjdGVkVGFiOiB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIG9ic2VydmVyOiAnX3RhYlNlbGVjdGVkJ1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBSZXNwb25zZSBjYWNoZToge3VybEFzS2V5OiByZXNwb25zZUFzVmFsdWV9XG4gICAgICAgICAgICovXG4gICAgICAgICAgX2NhY2hlOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICB2YWx1ZToge31cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb2JzZXJ2ZXJzOiBbJ3NvdXJjZUNoYW5nZWQoc291cmNlKSddLFxuXG4gICAgICAgIHNvdXJjZUNoYW5nZWQ6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFwcC5jb25maWcpIHtcbiAgICAgICAgICAgIGlmICghXy5pbmNsdWRlcyhfLmtleXModGhpcy5fY2FjaGUpLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnJXMgbm90IGluIGNhY2hlLiBVcGRhdGluZy4uLicsIG5ld1ZhbHVlKTtcblxuICAgICAgICAgICAgICBsZXQgdmFsdWVzID0ge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgbWV0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6ICdyYXcnXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgdGhpcy5pbmZvVXJsID0gYXBwLm11bHRpVmFsdWVVcmwoYXBwLmJvb3RzdHJhcC5iYXNlSXJzTWV0YVRlbXBsYXRlLCB2YWx1ZXMpO1xuXG4gICAgICAgICAgICAgIHRoaXMubWV0YVJlc3BvbnNlID0ge21ldGE6IHtkYXRhOiAnTG9hZGluZy4uLid9fTtcbiAgICAgICAgICAgICAgdGhpcy4kLm1ldGFBamF4LmdlbmVyYXRlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5zZXQoJ21ldGFSZXNwb25zZScsIHRoaXMuX2NhY2hlW25ld1ZhbHVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGtleUZyb206IGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgICAgICAgcmV0dXJuIGVudHJ5WzBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIHZhbHVlRnJvbTogZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgICByZXR1cm4gZW50cnlbMV07XG4gICAgICAgIH0sXG5cbiAgICAgICAgX21ldGFSZXNwb25zZUNoYW5nZWQ6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKCFfLmlzRXF1YWwobmV3VmFsdWUsIHttZXRhOiB7ZGF0YTogJ0xvYWRpbmcuLi4nfX0pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zb3VyY2UgJiYgIV8uaW5jbHVkZXModGhpcy5fY2FjaGUsIHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICB0aGlzLl9jYWNoZVt0aGlzLnNvdXJjZV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpZ25vcmVkID0gWydTb3VyY2VGaWxlJ107XG5cbiAgICAgICAgICBjb25zdCBzaG91bGRFeGNsdWRlID0gKGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIF8uaW5jbHVkZXMoaWdub3JlZCwga2V5KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgZ2V0UHJvZmlsZSA9IChrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7bGFiZWw6IGtleSwgZGF0YTogXy50b1BhaXJzKG5ld1ZhbHVlW2tleV0pfTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgbGV0IHByb2ZpbGVzID0gXy5tYXAoXy5maWx0ZXIoXy5rZXlzKG5ld1ZhbHVlKSwgXy5uZWdhdGUoc2hvdWxkRXhjbHVkZSkpLCBnZXRQcm9maWxlKTtcblxuICAgICAgICAgIHRoaXMuc2V0KCdfcHJvZmlsZXMnLCBwcm9maWxlcyk7XG4gICAgICAgICAgdGhpcy5zZXQoJ3NlbGVjdGVkVGFiJywgMCk7XG4gICAgICAgICAgdGhpcy5zZXQoJ19jdXJyZW50UHJvZmlsZScsIHRoaXMuX3Byb2ZpbGVzW3RoaXMuc2VsZWN0ZWRUYWJdKTtcblxuICAgICAgICAgIHRoaXMuZmlyZSgnaXJvbi1zaWduYWwnLCB7bmFtZTogJ21ldGEtZGF0YS1yZWNlaXZlZCcsIGRhdGE6IG5ld1ZhbHVlfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RhYlNlbGVjdGVkOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ3RhYiBzZWxlY3RlZDogJywgZSk7XG4gICAgICAgICAgdGhpcy5zZXQoJ19jdXJyZW50UHJvZmlsZScsIHRoaXMuX3Byb2ZpbGVzW3RoaXMuc2VsZWN0ZWRUYWJdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
