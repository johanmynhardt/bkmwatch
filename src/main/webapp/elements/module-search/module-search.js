'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'module-search',
    properties: {
      seltd: {
        type: Object,
        value: function value() {
          return [];
        },
        notify: true
      },
      showSelection: {
        type: Boolean,
        value: false,
        notify: true
      },
      searchInProgress: {
        type: Boolean,
        value: false,
        notify: true
      },
      searchType: {
        type: String,
        value: undefined,
        notify: true
      },
      hasNext: {
        type: Boolean,
        value: false,
        notify: true
      },
      _showInsertFab: {
        type: Boolean,
        value: false,
        notify: true
      },

      _typeArticle: {
        type: Boolean,
        value: false
      },
      _typeAudio: {
        type: Boolean,
        value: false
      },
      _typeImage: {
        type: Boolean,
        value: true
      },
      _typeVideo: {
        type: Boolean,
        value: false
      }
    },
    observers: ['seltdChange(seltd)', '_showSelectionChanged(showSelection)', 'searchTypeChanged(searchType)'],
    seltdChange: function seltdChange(data) {
      console.log('data: ', data);
    },

    selectionChanged: function selectionChanged(e, data, sourc) {
      console.log('selectionChanged: ', data);
      console.log('source: ', sourc);
      this.seltd = data;
      this.selected = data;
    },

    toggleShowSelection: function toggleShowSelection() {
      this.showSelection = !this.showSelection;
    },

    getImageItem: function getImageItem(mediaItem) {
      var reference = mediaItem.references[0];
      return {
        caption: mediaItem.caption,
        altText: reference.alternateText,
        imageURL: reference.imageURL,
        width: reference.width,
        height: reference.height,
        mimeType: reference.mimeType,
        source: reference.imageSource,
        selected: true
      };
    },

    removeItem: function removeItem(e) {
      var idx = this.seltd.indexOf(e.model.item);
      this.splice('seltd', idx, 1);
    },

    sendToInitiator: function sendToInitiator() {
      app.sendToInitiator('selected', 'items', this.seltd);
    },

    _nextPage: function _nextPage() {
      this.$.acasearch.nextPage();
    },

    _hasNext: function _hasNext(hasNext) {
      console.log('set hasNext: %s, searchInProgress: %s', hasNext, this.searchInProgress);
      this.set('hasNext', hasNext);
    },

    searchLoadingChanged: function searchLoadingChanged(e) {
      app.$.searchProgress.toggleAttribute('indeterminate', e.detail.loading);
      app.$.searchProgress.toggleAttribute('hidden', !e.detail.loading);
      this._hasNext(e.detail.hasNext);
      this.searchInProgress = e.detail.loading;
    },

    searchTypeChanged: function searchTypeChanged(newSearchType) {
      console.log('newSearchType: ', newSearchType);

      var logType = function logType(props) {
        return function (type) {
          return console.trace('typeFor %s: %s', type, props[type].value);
        };
      };

      var typeMap = {
        'type-media': 'Image',
        'type-image': 'Image',
        'type-audio': 'Audio',
        'type-video': 'Video',
        'type-article': 'Article',

        isForType: function isForType(type, intended) {
          return typeMap[type] ? typeMap[type].endsWith(intended) : false;
        }
      };

      this.set('_typeImage', typeMap.isForType(newSearchType, 'Image'));
      this.set('_typeAudio', typeMap.isForType(newSearchType, 'Audio'));
      this.set('_typeVideo', typeMap.isForType(newSearchType, 'Video'));
      this.set('_typeArticle', typeMap.isForType(newSearchType, 'Article'));

      ['_typeArticle', '_typeImage', '_typeAudio', '_typeVideo'].map(logType(this.properties));
    },

    _showSelectionChanged: function _showSelectionChanged(newValue) {
      console.info('showSelectionChanged: ', newValue);
      this._showInsertFab = newValue && app.config.embedded;
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,
