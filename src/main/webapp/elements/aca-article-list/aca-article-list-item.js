'use strict';

(function () {
  Polymer({
    is: 'aca-article-list-item',
    properties: {
      item: {
        type: Object,
        value: undefined,
        observer: 'itemChanged'
      },
      itemThumbUrl: {
        type: String,
        value: undefined
      },
      itemThumbStyle: {
        type: String,
        value: undefined
      },
      hasImage: {
        type: Boolean,
        value: false,
        notify: true
      }
    },

    //observers: ['itemSelectedChanged(item.selected)'],

    itemChanged: function itemChanged(newValue) {
      console.log('article item changed: ', newValue);

      var firstImage = this._firstImageFromArticle(newValue.article);
      if (firstImage) {
        this.hasImage = true;
        this.itemThumbUrl = imgutils.irsThumb(app.config, imgutils.computeSquareDims(firstImage, 100, 'src'), firstImage.imageURL);
        this.itemThumbStyle = imgutils.computeSquareDims(firstImage, 100, 'style');
      } else {
        console.warn('no image found for article');
      }
    },

    /*itemSelectedChanged: function(newValue) {
      console.trace('itemSelectedChanged: ', newValue);
    },*/

    _author: function _author(article) {
      if (_.isObject(article)) {
        return S(article.author).isEmpty() ? 'Unknown Author' : article.author;
      } else {
        return 'Unknown Author';
      }
    },

    _canSelectForClone: function _canSelectForClone() {
      return !app.config.standalone;
    },

    _date: function _date(dateLong) {
      return new Date(dateLong).toDateString();
    },

    _displayArticle: function _displayArticle() {
      this.$.articleDialog.displayArticle(this.item);
    },

    _headline: function _headline(article) {
      // need to check why article is null...
      // BAOBAB-1678
      if (_.isObject(article) && (article.label || article.headlineSummary)) {
        return S(article.label ? article.label : article.headlineSummary).stripTags().s;
      } else {
        return '';
      }
    },

    _iconStyle: function _iconStyle(selected) {
      console.trace('item selected: ', selected);
      return selected ? 'check-box' : 'check-box-outline-blank';
    },

    _toggleItem: function _toggleItem() {
      //var newSelected = !this.item.selected;

      //this.set('item.selected', newSelected);
      //this._iconStyle(newSelected);

      this.fire('iron-signal', { name: 'article-toggled', data: this.item });
    },

    _title: function _title(item) {
      if (_.isObject(item)) {
        return S(item.metaData.titleName).isEmpty() ? 'Unknown Title' : item.metaData.titleName;
      } else {
        return 'Unknown Title';
      }
    },

    _truncate: function _truncate(input) {
      if (input) {
        return S(input).stripTags().s.substr(0, 200) + '...';
      }
    },

    _firstImageFromArticle: function _firstImageFromArticle(article) {
      var mediaItem = _.isObject(article) ? _.head(article.mediaList.mediaItems) : undefined;
      return _.has(mediaItem, 'references') ? _.head(mediaItem.references) : undefined;
    },

    _itemFromCollection: function _itemFromCollection(collection, position) {
      if (collection.length > 0 && position - 1 < collection.length) {
        return collection[position];
      } else {
        return undefined;
      }
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,
