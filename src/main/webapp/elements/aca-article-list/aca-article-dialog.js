'use strict';

(function () {
  Polymer({
    is: 'aca-article-dialog',
    properties: {
      heading: {
        type: String,
        value: 'Heading not set'
      },
      item: {
        type: Object,
        value: undefined,
        notify: true,
        observer: 'itemChanged'
      },
      images: {
        type: Array,
        value: []
      },
      tags: {
        type: Array,
        value: []
      },
      _showOrHideMediaText: {
        type: String,
        value: 'Show'
      },
      _showOrHideTagsText: {
        type: String,
        value: 'Show'
      },
      _infoUrl: {
        type: String,
        value: ''
      },
      _lookupResponse: {
        type: Object,
        value: undefined
      },
      _lastError: {
        type: Object,
        value: undefined,
        notify: true
      }
    },

    displayArticle: function displayArticle(newItem) {
      console.log('displaying article: ', newItem);
      this.item = newItem;
      this.$.detailsDialog.open();
    },

    itemChanged: function itemChanged(newValue) {
      console.info('change detected: ', newValue);

      //this._updateMetaData(newValue);

      this.heading = S(newValue.article.label ? newValue.article.label : newValue.article.headlineSummary).stripTags().s;

      this.author = S(newValue.article.author).isEmpty() ? 'Unknown Author' : newValue.article.author;
      this.publishDate = new Date(newValue.article.publishDate).toDateString();
      this.titleString = _.isEmpty(newValue.metaData.titleName) ? 'Unknown Title' : newValue.metaData.titleName;
      this.$.htmlContent.innerHTML = newValue.article.articleHTML;

      this.hasImages = imgutils.hasImages(newValue.article);
      if (this.hasImages) {
        var mediaItems = imgutils.mediaItems(newValue.article, 'Image');
        var newImages = [];
        mediaItems.forEach(function (mediaItem) {
          var newImg = _.head(mediaItem.references);
          if (newImg) {
            newImages.push(newImg);
          }
        });
        this.images = newImages;
      } else {
        this.images = [];
      }

      this.hasTags = _.isArray(newValue.article.tags) && newValue.article.tags.length > 0;
      this.tags = this.hasTags ? newValue.article.tags : [];
      console.info('hasTags: ', this.hasTags);
    },

    toggleMedia: function toggleMedia() {
      console.log('toggle collapse: ', this.$.collapse);

      this.$.collapse.toggle();

      this._showOrHideMediaText = this.$.collapse.opened ? 'hide' : 'show';
    },

    toggleTags: function toggleTags() {
      this.$.tagCollapse.toggle();
      this._showOrHideTagsText = this.$.tagCollapse.opened ? 'hide' : 'show';
    },

    _hideDownload: function _hideDownload() {
      return app.config.standalone !== true;
    },

    _imgThumbStyle: function _imgThumbStyle(image) {
      return imgutils.computeThumbDims(image, 200, 'style');
    },

    _imgThumbUrl: function _imgThumbUrl(image) {
      return imgutils.irsThumb(app.config, imgutils.computeThumbDims(image, 200, 'src'), image.imageURL);
    },

    _irsDownload: function _irsDownload(image) {
      return imgutils.irsDownload(app.config, image.imageURL);
    },

    _closeDialog: function _closeDialog() {
      this.$.detailsDialog.close();
    },

    fromContentKey: function fromContentKey(contentKey) {
      // populate fields from content lookup.

      console.debug('populating article from contentKey: ', contentKey);

      var config = {
        contentKey: contentKey,
        datasetKey: 'forsearch',
        type: 'content'
      };

      this.infoUrl = app.multiValueUrl(app.bootstrap.baseLookupTemplate, config);

      console.info('lodash infoUrl: ', this.infoUrl);

      this.metaResponse = { meta: { data: 'Loading...' } };
      this.$.metaAjax.generateRequest();

      this.displayArticle({});
    },

    _updateMetaData: function _updateMetaData(newArticle) {
      console.info('newArticle: ', newArticle);

      var config = {
        contentKey: newArticle.metaData.contentKey,
        datasetKey: 'forsearch',
        type: 'content'
      };

      this.infoUrl = app.multiValueUrl(app.bootstrap.baseLookupTemplate, config);
      console.info('underscore infoUrl: ', this.infoUrl);

      this.metaResponse = { meta: { data: 'Loading...' } };
      this.$.metaAjax.generateRequest();
    }

  });
})();
//# sourceMappingURL=data:application/json;base64,
