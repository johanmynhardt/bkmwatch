'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'aca-autocomplete-input',

    properties: {

      _paperInput: {
        type: Object,
        value: undefined
      },

      selected: {
        type: Array,
        value: [],
        notify: true
      },

      available: {
        type: Array,
        value: function value() {
          return _.map(_.range(0, 200), function (x) {
            return {
              id: x,
              label: '' + x
            };
          });
        }
      },

      db: {
        type: String,
        value: undefined
      },

      selectionListener: {
        type: Object,
        value: undefined
      },

      minExpand: {
        type: Number,
        value: 1
      }
    },

    attached: function attached() {
      var inputItem = this.$.container.querySelector('paper-input');

      if (!_.isUndefined(inputItem)) {
        this._paperInput = inputItem;
        this.listen(this._paperInput, 'keyup', 'onInputChange');
      }
    },

    addToSelection: function addToSelection(newItem) {
      console.trace('adding to selection(for=%s): %s, %o', this.for, newItem.label, this.selected);
      this.push('selected', newItem);
      this._paperInput.value = '';

      if (!_.isUndefined(this.selectionListener)) {
        console.log('calling onSelect:', this.selectionListener);
        this.selectionListener.onSelect(newItem);
      }
    },

    removeFromSelection: function removeFromSelection(itemToRemove) {

      console.info('removing %s from %o', itemToRemove.label, _.map(this.selected, 'label'));

      var idx = _.indexOf(this.selected, itemToRemove);
      console.info('removing item at idx: ', idx);
      if (_.gt(idx, -1)) {
        console.info('removed item from list: ', this.splice('selected', idx, 1));
      } else {
        console.warn('item %o not found in list %o', itemToRemove, this.selected);
      }
    },

    onInputChange: function onInputChange(event) {
      if (!_.isUndefined(event.target)) {
        var val = _.toLower(event.target.value);
        var min = this.minExpand;

        var inputLengthGTE = function inputLengthGTE(input, min, debug) {
          var toReturn = _.gte(_.size(input), min);
          if (debug) {
            console.trace('_.gte(_.size(%s), %s): %s', input, min, toReturn);
          }
          return toReturn;
        };

        var isCtrlSpace = function isCtrlSpace(e) {
          var KEY_CODE_SPACE = 32;
          return e.ctrlKey && _.isEqual(e.keyCode, KEY_CODE_SPACE);
        };

        var filteredItems = function filteredItems(collection, filter) {
          return _.filter(collection, function (x) {
            return _.includes(_.toLower(x.label), filter);
            //return _.startsWith(_.toLower(x.label), filter);
          });
        };

        if (inputLengthGTE(val, min)) {
          var collection = _.uniqBy(app.db[this.db], 'label');
          this.$.acdropdown.items = filteredItems(collection, val);
        } else if (isCtrlSpace(event)) {
          this.$.acdropdown.items = _.sortBy(_.uniqBy(app.db[this.db], 'label'), 'label');
        } else {
          //this.$.acoverlay.items = [];
          console.warn('input value less than %s chars', min);
        }
      } else {
        console.warn('not responding to input');
      }
    },

    addAutocompleteItem: function addAutocompleteItem(e) {
      if (_.isEqual(this.for, e.detail.for)) {
        console.trace('iron-signal: request to add item: ', e);
        this.addToSelection(e.detail.item);
      }
    },

    removeAutocompleteItem: function removeAutocompleteItem(e) {
      if (_.isEqual(this.for, e.detail.for)) {
        console.trace('iron-signal: request to remove item: ', e);
        this.removeFromSelection(e.detail.item);
      }
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,
