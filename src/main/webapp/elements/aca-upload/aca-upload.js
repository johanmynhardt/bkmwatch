'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'aca-upload',

    properties: {
      addingUpload: {
        type: Boolean,
        value: false
      },

      allMediaProcessed: {
        type: Boolean,
        value: false
      },

      canAddMedia: {
        type: Boolean,
        value: false
      },

      canSubmit: {
        type: Boolean,
        value: false
      },

      author: {
        type: String,
        value: undefined
      },
      headline: {
        type: String,
        value: undefined,
        observer: 'headlineChanged'
      },
      summary: {
        type: String,
        value: undefined
      },
      body: {
        type: String,
        value: undefined
      },

      hasMedia: {
        type: Boolean,
        value: false
      },

      files: {
        type: File,
        value: []
      },

      filesUploaded: {
        type: File,
        value: []
      },

      step: {
        type: Number,
        value: 0
      }
    },

    get hasHeadline() {
      return !_.isEmpty(this.headline) && this.headline.length > 5;
    },

    get hasCompletedUploads() {
      return this.files.length === this.filesUploaded.length && this.filesUploaded.length > 0;
    },

    get hasUploadsInProgress() {
      return this.files.length > 0 && this.filesUploaded.length < this.files.length;
    },

    get uploadEndpoint() {
      var templateUrl = app.bootstrap.withPath(app.bootstrap.media);
      return app.urlFromConfig(app.config, templateUrl);
    },

    headlineChanged: function headlineChanged() {
      this.set('canAddMedia', this.hasHeadline);
      this.syncSubmitStatus();
    },

    doSubmit: function doSubmit(e) {
      var endpoint = this.uploadEndpoint;
      console.info('submitting from event: ', e);

      var attachMediaDetails = function (filesUploaded) {
        var updateFile = function (uploadedFile) {
          var found = _.find(this.files, {
            lastModified: uploadedFile.file.lastModified,
            name: uploadedFile.file.name,
            size: uploadedFile.file.size,
            type: uploadedFile.file.type
          });

          if (found) {
            // currently the only field updated post-upload.
            uploadedFile.caption = found.caption;
          }
        }.bind(this);

        _.each(filesUploaded, updateFile);
        return filesUploaded;
      }.bind(this);

      var data = {
        author: this.author,
        headline: this.headline,
        summary: this.summary,
        body: this.body,
        media: attachMediaDetails(this.filesUploaded)
      };

      console.info('Submitting to endpoint [%s] data: ', endpoint, data);

      axios.post(endpoint, data, { withCredentials: true }).then(function (res) {
        console.info('upload complete: ', res);
        app.showToast('Upload complete! :)');
        this.reset();
        page.redirect('/article/' + res.data.entity.id);
      }.bind(this)).catch(function (err) {

        if (_.hasIn(err, 'data.entity') && err.data.entity) {
          app.showPermaToast('Upload failed. Message from server: ' + err.data.entity);
        } else {
          console.error('Upload error: ', err);
          app.showToast('Upload failed: {err}. See console for more info.', {
            err: err
          }, true);
        }
      });
    },

    showAdder: function showAdder() {
      this.addingUpload = true;
    },

    showUploads: function showUploads() {
      this.set('step', 1);
    },

    launchFileInput: function launchFileInput(e) {
      e.stopPropagation();
      e.preventDefault();
      this.$.fileInput.click();
    },

    uploadCompleted: function uploadCompleted(e) {
      console.info('upload completed: ', e);

      var withHydratedFileInfo = function withHydratedFileInfo(detail) {
        return {
          entity: detail.entity,
          file: {
            name: detail.file.name,
            lastModified: detail.file.lastModified,
            lastModifiedDate: detail.file.lastModifiedDate,
            size: detail.file.size,
            type: detail.file.type
          }
        };
      };

      this.push('filesUploaded', withHydratedFileInfo(e.detail));
      this.syncSubmitStatus();
    },

    reset: function reset(e) {
      console.debug('reset requested: ', e);
      if (!this.hasUploadsInProgress) {
        // TODO: Need to stop current uploads, or only show reset once nothing is uploading.
        this.set('step', 0);
        this.set('headline', undefined);
        this.set('author', undefined);
        this.set('summary', undefined);
        this.set('body', undefined);
        this.set('files', []);
        this.set('filesUploaded', []);
      } else {
        this.$.resetWarning.show();
      }
    },

    hideWarning: function hideWarning() {
      this.$.resetWarning.hide();
    },

    syncSubmitStatus: function syncSubmitStatus() {
      this.set('hasMedia', !_.isEmpty(this.files));
      this.set('canSubmit', this.hasCompletedUploads && this.hasHeadline);
      this.$.postButton.toggleClass('enabled', this.hasCompletedUploads && this.hasHeadline);
    },

    handleFiles: function handleFiles(e) {
      console.info('handleFiles: ', e.target.files.length);

      var supported = function supported(file) {
        return (/^image\/.*/.test(file.type) || /^audio\/.*/.test(file.type) || /video\/.*/.test(file.type)
        );
      };

      var pushIfSupported = function pushIfSupported(file) {
        return function (to) {
          if (supported(file)) {
            to.push('files', file);
          }
        };
      };

      for (var i = 0; i < e.target.files.length; i++) {
        pushIfSupported(e.target.files[i])(this);
      }

      this.syncSubmitStatus();
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,
