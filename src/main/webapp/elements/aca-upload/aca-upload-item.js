'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'aca-upload-item',

    properties: {
      file: {
        type: File,
        observer: 'fileChanged'
      },

      thumbData: {
        type: String,
        value: undefined
      },

      progress: {
        type: Number,
        value: 0
      },

      uploaded: {
        type: Boolean,
        value: false
      },

      filePath: {
        type: String,
        value: undefined
      },

      publicLocation: {
        type: String,
        value: null
      },

      newCaption: {
        type: String,
        value: undefined
      }
    },

    listeners: {
      'iron-overlay-closed': 'dialogClosed'
    },

    get calcEndpoint() {
      var templateUrl = app.bootstrap.withPath(app.bootstrap.media);
      return app.urlFromConfig(app.config, templateUrl);
    },

    setImgSrc: function setImgSrc(value) {
      this.$.img.setAttribute('src', value);
    },

    fileChanged: function fileChanged(newFile) {
      if (/^image\/.*/.test(newFile.type)) {
        var thumbReader = new FileReader();
        thumbReader.onload = function (e) {
          this.setImgSrc(e.target.result);
        }.bind(this);
        thumbReader.readAsDataURL(newFile);
      } else if (/^audio\/.*/.test(newFile.type)) {
        this.setImgSrc('images/sonata.png');
      } else if (/^video\/.*/.test(newFile.type)) {
        this.setImgSrc('images/totem2.png');
      } else {
        this.setImgSrc('images/help-contents2.png');
      }

      this.registerUpload(newFile);
    },

    registerUpload: function registerUpload(file) {
      console.info('Instantiating fileUpload: ', file);

      var data = new FormData();
      data.append('file', file);

      var updateProgress = function (newValue) {
        this.setProgress(newValue);
      }.bind(this);

      var uploadComplete = function (data) {
        console.info('updating completed data: ', data);
        this.publicLocation = data.entity.publicLocation;
        this.filePath = data.entity.filePath;
        this.fire('iron-signal', {
          name: 'upload-complete',
          data: {
            entity: data.entity,
            file: file
          }
        });
      }.bind(this);

      var config = {
        progress: function progress(e) {
          updateProgress(Math.round(e.loaded / e.total * 100));
        },
        withCredentials: true
      };

      axios.post(this.calcEndpoint, data, config).then(function (res) {
        console.debug('upload response: ', res);
        if (res.status === 200) {
          uploadComplete(res.data);
        }
        this.uploaded = true;
      }.bind(this)).catch(function (err) {
        app.showToast('Upload failed: {err}. See console for more info.', { err: err }, true);
      });
    },

    setProgress: function setProgress(progressValue) {
      this.progress = progressValue;
    },

    showCaptionDialog: function showCaptionDialog() {
      this.set('newCaption', this.file.caption);
      this.$.captionDialog.open();
    },

    dialogClosed: function dialogClosed(e) {
      if (e.detail.confirmed) {
        //this.set('caption', this.newCaption);
        this.set('file.caption', this.newCaption);
      }
    },

    clearCaption: function clearCaption() {
      this.set('newCaption', null);
    },

    launchExternal: function launchExternal() {
      window.open(this.publicLocation);
    }

  });
})();
//# sourceMappingURL=data:application/json;base64,
