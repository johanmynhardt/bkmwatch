'use strict';

(function () {
  Polymer({
    is: 'aca-video-dialog',

    properties: {

      auto: {
        type: Boolean,
        value: false
      },

      video: {
        type: Object,
        value: undefined
      },

      selectedTab: {
        type: Number,
        value: 0
      },

      _usageTuples: {
        type: Array,
        value: []
      },

      infoUrl: {
        type: String,
        value: undefined
      },

      _lookupResponse: {
        type: Object,
        value: undefined,
        observer: '_lookupResponseChanged'
      },

      _lastError: {
        type: Object,
        value: null,
        observer: '_lastErrorChanged'
      }
    },

    ready: function ready() {
      this.videoElement.addEventListener('contextmenu', function (e) {
        e.preventDefault();
        e.stopPropagation();
      });
    },

    show: function show(video) {
      this.set('video', video);
      this._updateInfoUrl(video);

      this.$.detailsDialog.fit();
      this.$.detailsDialog.open();
      this.videoElement.load();
      if (this.auto) {
        this._togglePlay();
      } else {
        this._updatePlayState();
      }
    },

    get videoElement() {
      var videoElement = Polymer.dom(this.$.detailsDialog).querySelector('video');
      if (!videoElement) {
        console.error('OH NO! no videoElement found!');
      }
      return videoElement;
    },

    _caption: function _caption(video) {
      return _.has(video, 'caption') && !_.isEmpty(video.caption) ? video.caption : '(Video without caption)';
    },

    _fullscreen: function _fullscreen() {
      if (this.videoElement.webkitRequestFullscreen) {
        this.videoElement.webkitRequestFullscreen();
      }
      if (this.videoElement.mozRequestFullScreen) {
        this.videoElement.mozRequestFullScreen();
      }
      if (this.videoElement.requestFullscreen) {
        this.videoElement.requestFullscreen();
      }
    },

    _mapForUsage: function _mapForUsage(object) {

      // TODO: Need to include author/headline/other info available as per image usage dialog.

      var keys = [
      //'contentKey',
      //'editionDate',
      //'editionId',
      'sections',
      //'tenantKey',
      //'titleId',
      //'titleKey',
      'titleName', 'author', 'geoPoint', 'headlineFull', 'headlineSummary', 'label', 'tags', 'articleDate'];

      var filterByKey = _.curry(function (keys, pair) {
        return _.includes(keys, pair[0]);
      });

      var filterNonEmpty = function filterNonEmpty(pair) {
        return !(_.isUndefined(pair[1]) || _.isNull(pair[1]) || _.isEmpty(pair[1]));
      };

      var transformIfArrayTupleValue = function transformIfArrayTupleValue(pair) {
        if (pair[0] === 'sections' && _.isArray(pair[1])) {
          pair[1] = _.chain(pair[1]).map('sectionName').join(', ').value();
        }
        return pair;
      };

      return _.chain(object).toPairs().filter(filterNonEmpty).filter(filterByKey(keys)).map(transformIfArrayTupleValue).value();
    },

    _map: function _map(object) {

      var transformIfArrayTupleValue = function transformIfArrayTupleValue(pair) {
        if (pair[0] === 'sections' && _.isArray(pair[1])) {
          pair[1] = _.chain(pair[1]).map('sectionName').join(', ').value();
        }
        return pair;
      };

      return _.chain(object).toPairs().map(transformIfArrayTupleValue).value();
    },

    _stopAndExit: function _stopAndExit(e) {
      console.info('stopAndExit: ', e);
      if (this.videoElement) {
        console.info('stopAndExit: Pausing');
        this.videoElement.pause();
      }
      console.info('stopAndExit: close().');
      this.$.detailsDialog.close();
    },

    _togglePlay: function _togglePlay() {
      if (this.videoElement.paused) {
        this.videoElement.play();
      } else {
        this.videoElement.pause();
      }
      this._updatePlayState();
    },

    _updatePlayState: function _updatePlayState() {
      var iconStyle = this.videoElement.paused ? 'av:play-circle-outline' : 'av:pause-circle-outline';

      Polymer.dom(this.$.playPauseButton).setAttribute('icon', iconStyle);
    },

    /* Request-related (info url) */
    _updateInfoUrl: function _updateInfoUrl(video) {
      var queryParameters = {
        contentKey: video.metaData.contentKey,
        datasetKey: 'forsearch',
        type: 'content'
      };

      this.set('infoUrl', app.multiValueUrl(app.bootstrap.baseLookupTemplate, queryParameters));
      this.$.metaAjax.generateRequest();
    },

    _lookupResponseChanged: function _lookupResponseChanged(lookupResponse) {
      console.info('received lookupResponse: ', lookupResponse);

      var copyKeys = [
      //'abstractSummary',
      'author', 'geoPoint', 'headlineFull', 'headlineSummary', 'label', 'tags', 'articleDate'];

      // response.content[0].article.*
      var article = lookupResponse.content[0].article;

      _.each(_.keys(article), function (key) {
        if (_.includes(copyKeys, key)) {
          console.info('adding article key to metaData: ', key);
          this.video.metaData[key] = article[key];
        }
      }.bind(this));

      this.set('_usageTuples', this._mapForUsage(this.video.metaData));
    },

    _lastErrorChanged: function _lastErrorChanged(lastError) {
      console.error('lastError doing lookup: ', lastError);
      app.showToast('There was an error during lookup. See console for more info.', '', true);
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVsZW1lbnRzL2FjYS12aWRlby1saXN0L2FjYS12aWRlby1kaWFsb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxDQUFDLFlBQVc7QUFDTixVQUFRO0FBQ04sUUFBSSxrQkFERTs7QUFHTixnQkFBWTs7QUFFVixZQUFNO0FBQ0osY0FBTSxPQURGO0FBRUosZUFBTztBQUZILE9BRkk7O0FBT1YsYUFBTztBQUNMLGNBQU0sTUFERDtBQUVMLGVBQU87QUFGRixPQVBHOztBQVlWLG1CQUFhO0FBQ1gsY0FBTSxNQURLO0FBRVgsZUFBTztBQUZJLE9BWkg7O0FBaUJWLG9CQUFjO0FBQ1osY0FBTSxLQURNO0FBRVosZUFBTztBQUZLLE9BakJKOztBQXNCVixlQUFTO0FBQ1AsY0FBTSxNQURDO0FBRVAsZUFBTztBQUZBLE9BdEJDOztBQTJCVix1QkFBaUI7QUFDZixjQUFNLE1BRFM7QUFFZixlQUFPLFNBRlE7QUFHZixrQkFBVTtBQUhLLE9BM0JQOztBQWlDVixrQkFBWTtBQUNWLGNBQU0sTUFESTtBQUVWLGVBQU8sSUFGRztBQUdWLGtCQUFVO0FBSEE7QUFqQ0YsS0FITjs7QUEyQ04sV0FBTyxpQkFBVztBQUNoQixXQUFLLFlBQUwsQ0FBa0IsZ0JBQWxCLENBQW1DLGFBQW5DLEVBQWtELFVBQVMsQ0FBVCxFQUFZO0FBQzVELFVBQUUsY0FBRjtBQUNBLFVBQUUsZUFBRjtBQUNELE9BSEQ7QUFJRCxLQWhESzs7QUFrRE4sVUFBTSxjQUFTLEtBQVQsRUFBZ0I7QUFDcEIsV0FBSyxHQUFMLENBQVMsT0FBVCxFQUFrQixLQUFsQjtBQUNBLFdBQUssY0FBTCxDQUFvQixLQUFwQjs7QUFFQSxXQUFLLENBQUwsQ0FBTyxhQUFQLENBQXFCLEdBQXJCO0FBQ0EsV0FBSyxDQUFMLENBQU8sYUFBUCxDQUFxQixJQUFyQjtBQUNBLFdBQUssWUFBTCxDQUFrQixJQUFsQjtBQUNBLFVBQUksS0FBSyxJQUFULEVBQWU7QUFDYixhQUFLLFdBQUw7QUFDRCxPQUZELE1B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LFFBQVAsQ0FBZ0IsZUFBaEI7QUFDRCxLQTlMSzs7QUFnTU4sNEJBQXdCLGdDQUFTLGNBQVQsRUFBeUI7QUFDL0MsY0FBUSxJQUFSLENBQWEsMkJBQWIsRUFBMEMsY0FBMUM7O0FBRUEsVUFBSSxXQUFXO0FBQ2I7QUFDQSxjQUZhLEVBR2IsVUFIYSxFQUliLGNBSmEsRUFLYixpQkFMYSxFQU1iLE9BTmEsRUFPYixNQVBhLEVBUWIsYUFSYSxDQUFmOztBQVdBO0FBQ0EsVUFBSSxVQUFVLGVBQWUsT0FBZixDQUF1QixDQUF2QixFQUEwQixPQUF4Qzs7QUFFQSxRQUFFLElBQUYsQ0FBTyxFQUFFLElBQUYsQ0FBTyxPQUFQLENBQVAsRUFBd0IsVUFBUyxHQUFULEVBQWM7QUFDcEMsWUFBSSxFQUFFLFFBQUYsQ0FBVyxRQUFYLEVBQXFCLEdBQXJCLENBQUosRUFBK0I7QUFDN0Isa0JBQVEsSUFBUixDQUFhLGtDQUFiLEVBQWlELEdBQWpEO0FBQ0EsZUFBSyxLQUFMLENBQVcsUUFBWCxDQUFvQixHQUFwQixJQUEyQixRQUFRLEdBQVIsQ0FBM0I7QUFDRDtBQUNGLE9BTHVCLENBS3RCLElBTHNCLENBS2pCLElBTGlCLENBQXhCOztBQU9BLFdBQUssR0FBTCxDQUFTLGNBQVQsRUFBeUIsS0FBSyxZQUFMLENBQWtCLEtBQUssS0FBTCxDQUFXLFFBQTdCLENBQXpCO0FBQ0QsS0F6Tks7O0FBMk5OLHVCQUFtQiwyQkFBUyxTQUFULEVBQW9CO0FBQ3JDLGNBQVEsS0FBUixDQUFjLDBCQUFkLEVBQTBDLFNBQTFDO0FBQ0EsVUFBSSxTQUFKLENBQWMsOERBQWQsRUFBOEUsRUFBOUUsRUFBa0YsSUFBbEY7QUFDRDtBQTlOSyxHQUFSO0FBZ09ELENBak9MIiwiZmlsZSI6ImVsZW1lbnRzL2FjYS12aWRlby1saXN0L2FjYS12aWRlby1kaWFsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICAgICBQb2x5bWVyKHtcbiAgICAgICAgaXM6ICdhY2EtdmlkZW8tZGlhbG9nJyxcblxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG5cbiAgICAgICAgICBhdXRvOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNlbGVjdGVkVGFiOiB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBfdXNhZ2VUdXBsZXM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgdmFsdWU6IFtdXG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGluZm9Vcmw6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgX2xvb2t1cFJlc3BvbnNlOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgb2JzZXJ2ZXI6ICdfbG9va3VwUmVzcG9uc2VDaGFuZ2VkJ1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBfbGFzdEVycm9yOiB7XG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIG9ic2VydmVyOiAnX2xhc3RFcnJvckNoYW5nZWQnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvdzogZnVuY3Rpb24odmlkZW8pIHtcbiAgICAgICAgICB0aGlzLnNldCgndmlkZW8nLCB2aWRlbyk7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlSW5mb1VybCh2aWRlbyk7XG5cbiAgICAgICAgICB0aGlzLiQuZGV0YWlsc0RpYWxvZy5maXQoKTtcbiAgICAgICAgICB0aGlzLiQuZGV0YWlsc0RpYWxvZy5vcGVuKCk7XG4gICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQubG9hZCgpO1xuICAgICAgICAgIGlmICh0aGlzLmF1dG8pIHtcbiAgICAgICAgICAgIHRoaXMuX3RvZ2dsZVBsYXkoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUGxheVN0YXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldCB2aWRlb0VsZW1lbnQoKSB7XG4gICAgICAgICAgdmFyIHZpZGVvRWxlbWVudCA9IFBvbHltZXIuZG9tKHRoaXMuJC5kZXRhaWxzRGlhbG9nKS5xdWVyeVNlbGVjdG9yKCd2aWRlbycpO1xuICAgICAgICAgIGlmICghdmlkZW9FbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPSCBOTyEgbm8gdmlkZW9FbGVtZW50IGZvdW5kIScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmlkZW9FbGVtZW50O1xuICAgICAgICB9LFxuXG4gICAgICAgIF9jYXB0aW9uOiBmdW5jdGlvbih2aWRlbykge1xuICAgICAgICAgIHJldHVybiAoXy5oYXModmlkZW8sICdjYXB0aW9uJykgJiYgIV8uaXNFbXB0eSh2aWRlby5jYXB0aW9uKSkgPyB2aWRlby5jYXB0aW9uIDpcbiAgICAgICAgICAgICAgJyhWaWRlbyB3aXRob3V0IGNhcHRpb24pJztcbiAgICAgICAgfSxcblxuICAgICAgICBfZnVsbHNjcmVlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy52aWRlb0VsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLnZpZGVvRWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX21hcEZvclVzYWdlOiBmdW5jdGlvbihvYmplY3QpIHtcblxuICAgICAgICAgIC8vIFRPRE86IE5lZWQgdG8gaW5jbHVkZSBhdXRob3IvaGVhZGxpbmUvb3RoZXIgaW5mbyBhdmFpbGFibGUgYXMgcGVyIGltYWdlIHVzYWdlIGRpYWxvZy5cblxuICAgICAgICAgIHZhciBrZXlzID0gW1xuICAgICAgICAgICAgLy8nY29udGVudEtleScsXG4gICAgICAgICAgICAvLydlZGl0aW9uRGF0ZScsXG4gICAgICAgICAgICAvLydlZGl0aW9uSWQnLFxuICAgICAgICAgICAgJ3NlY3Rpb25zJyxcbiAgICAgICAgICAgIC8vJ3RlbmFudEtleScsXG4gICAgICAgICAgICAvLyd0aXRsZUlkJyxcbiAgICAgICAgICAgIC8vJ3RpdGxlS2V5JyxcbiAgICAgICAgICAgICd0aXRsZU5hbWUnLFxuICAgICAgICAgICAgJ2F1dGhvcicsXG4gICAgICAgICAgICAnZ2VvUG9pbnQnLFxuICAgICAgICAgICAgJ2hlYWRsaW5lRnVsbCcsXG4gICAgICAgICAgICAnaGVhZGxpbmVTdW1tYXJ5JyxcbiAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICAndGFncycsXG4gICAgICAgICAgICAnYXJ0aWNsZURhdGUnXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIHZhciBmaWx0ZXJCeUtleSA9IF8uY3VycnkoZnVuY3Rpb24oa2V5cywgcGFpcikge1xuICAgICAgICAgICAgcmV0dXJuIF8uaW5jbHVkZXMoa2V5cywgcGFpclswXSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgZmlsdGVyTm9uRW1wdHkgPSBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgICAgICByZXR1cm4gIShfLmlzVW5kZWZpbmVkKHBhaXJbMV0pIHx8IF8uaXNOdWxsKHBhaXJbMV0pIHx8IF8uaXNFbXB0eShwYWlyWzFdKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHZhciB0cmFuc2Zvcm1JZkFycmF5VHVwbGVWYWx1ZSA9IGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgICAgIGlmIChwYWlyWzBdID09PSAnc2VjdGlvbnMnICYmIF8uaXNBcnJheShwYWlyWzFdKSkge1xuICAgICAgICAgICAgICBwYWlyWzFdID0gXy5jaGFpbihwYWlyWzFdKVxuICAgICAgICAgICAgICAgICAgLm1hcCgnc2VjdGlvbk5hbWUnKS5qb2luKCcsICcpXG4gICAgICAgICAgICAgICAgICAudmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYWlyO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICByZXR1cm4gXy5jaGFpbihvYmplY3QpXG4gICAgICAgICAgICAgIC50b1BhaXJzKClcbiAgICAgICAgICAgICAgLmZpbHRlcihmaWx0ZXJOb25FbXB0eSlcbiAgICAgICAgICAgICAgLmZpbHRlcihmaWx0ZXJCeUtleShrZXlzKSlcbiAgICAgICAgICAgICAgLm1hcCh0cmFuc2Zvcm1JZkFycmF5VHVwbGVWYWx1ZSlcbiAgICAgICAgICAgICAgLnZhbHVlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX21hcDogZnVuY3Rpb24ob2JqZWN0KSB7XG5cbiAgICAgICAgICB2YXIgdHJhbnNmb3JtSWZBcnJheVR1cGxlVmFsdWUgPSBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgICAgICBpZiAocGFpclswXSA9PT0gJ3NlY3Rpb25zJyAmJiBfLmlzQXJyYXkocGFpclsxXSkpIHtcbiAgICAgICAgICAgICAgcGFpclsxXSA9IF8uY2hhaW4ocGFpclsxXSlcbiAgICAgICAgICAgICAgICAgIC5tYXAoJ3NlY3Rpb25OYW1lJykuam9pbignLCAnKVxuICAgICAgICAgICAgICAgICAgLnZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFpcjtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmV0dXJuIF8uY2hhaW4ob2JqZWN0KVxuICAgICAgICAgICAgICAudG9QYWlycygpXG4gICAgICAgICAgICAgIC5tYXAodHJhbnNmb3JtSWZBcnJheVR1cGxlVmFsdWUpXG4gICAgICAgICAgICAgIC52YWx1ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9zdG9wQW5kRXhpdDogZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnc3RvcEFuZEV4aXQ6ICcsIGUpO1xuICAgICAgICAgIGlmICh0aGlzLnZpZGVvRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdzdG9wQW5kRXhpdDogUGF1c2luZycpO1xuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGF1c2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdzdG9wQW5kRXhpdDogY2xvc2UoKS4nKTtcbiAgICAgICAgICB0aGlzLiQuZGV0YWlsc0RpYWxvZy5jbG9zZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF90b2dnbGVQbGF5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGhpcy52aWRlb0VsZW1lbnQucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5wbGF5KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnBhdXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3VwZGF0ZVBsYXlTdGF0ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF91cGRhdGVQbGF5U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpY29uU3R5bGUgPSB0aGlzLnZpZGVvRWxlbWVudC5wYXVzZWQgP1xuICAgICAgICAgICAgICAnYXY6cGxheS1jaXJjbGUtb3V0bGluZScgOlxuICAgICAgICAgICAgICAnYXY6cGF1c2UtY2lyY2xlLW91dGxpbmUnO1xuXG4gICAgICAgICAgUG9seW1lci5kb20odGhpcy4kLnBsYXlQYXVzZUJ1dHRvbikuc2V0QXR0cmlidXRlKCdpY29uJywgaWNvblN0eWxlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiBSZXF1ZXN0LXJlbGF0ZWQgKGluZm8gdXJsKSAqL1xuICAgICAgICBfdXBkYXRlSW5mb1VybDogZnVuY3Rpb24odmlkZW8pIHtcbiAgICAgICAgICB2YXIgcXVlcnlQYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgY29udGVudEtleTogdmlkZW8ubWV0YURhdGEuY29udGVudEtleSxcbiAgICAgICAgICAgIGRhdGFzZXRLZXk6ICdmb3JzZWFyY2gnLFxuICAgICAgICAgICAgdHlwZTogJ2NvbnRlbnQnXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHRoaXMuc2V0KCdpbmZvVXJsJywgYXBwLm11bHRpVmFsdWVVcmwoYXBwLmJvb3RzdHJhcC5iYXNlTG9va3VwVGVtcGxhdGUsIHF1ZXJ5UGFyYW1ldGVycykpO1xuICAgICAgICAgIHRoaXMuJC5tZXRhQWpheC5nZW5lcmF0ZVJlcXVlc3QoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfbG9va3VwUmVzcG9uc2VDaGFuZ2VkOiBmdW5jdGlvbihsb29rdXBSZXNwb25zZSkge1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygncmVjZWl2ZWQgbG9va3VwUmVzcG9uc2U6ICcsIGxvb2t1cFJlc3BvbnNlKTtcblxuICAgICAgICAgIHZhciBjb3B5S2V5cyA9IFtcbiAgICAgICAgICAgIC8vJ2Fic3RyYWN0U3VtbWFyeScsXG4gICAgICAgICAgICAnYXV0aG9yJyxcbiAgICAgICAgICAgICdnZW9Qb2ludCcsXG4gICAgICAgICAgICAnaGVhZGxpbmVGdWxsJyxcbiAgICAgICAgICAgICdoZWFkbGluZVN1bW1hcnknLFxuICAgICAgICAgICAgJ2xhYmVsJyxcbiAgICAgICAgICAgICd0YWdzJyxcbiAgICAgICAgICAgICdhcnRpY2xlRGF0ZSdcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgLy8gcmVzcG9uc2UuY29udGVudFswXS5hcnRpY2xlLipcbiAgICAgICAgICB2YXIgYXJ0aWNsZSA9IGxvb2t1cFJlc3BvbnNlLmNvbnRlbnRbMF0uYXJ0aWNsZTtcblxuICAgICAgICAgIF8uZWFjaChfLmtleXMoYXJ0aWNsZSksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgaWYgKF8uaW5jbHVkZXMoY29weUtleXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdhZGRpbmcgYXJ0aWNsZSBrZXkgdG8gbWV0YURhdGE6ICcsIGtleSk7XG4gICAgICAgICAgICAgIHRoaXMudmlkZW8ubWV0YURhdGFba2V5XSA9IGFydGljbGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgdGhpcy5zZXQoJ191c2FnZVR1cGxlcycsIHRoaXMuX21hcEZvclVzYWdlKHRoaXMudmlkZW8ubWV0YURhdGEpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBfbGFzdEVycm9yQ2hhbmdlZDogZnVuY3Rpb24obGFzdEVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignbGFzdEVycm9yIGRvaW5nIGxvb2t1cDogJywgbGFzdEVycm9yKTtcbiAgICAgICAgICBhcHAuc2hvd1RvYXN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgZHVyaW5nIGxvb2t1cC4gU2VlIGNvbnNvbGUgZm9yIG1vcmUgaW5mby4nLCAnJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
