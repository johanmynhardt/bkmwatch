'use strict';

(function () {
  'use strict';

  Polymer({
    is: 'aca-search-filter',

    /**
     * aca-search-filter properties
     */
    properties: {
      displayFilter: {
        type: Boolean,
        value: false,
        notify: true
      },
      startDate: {
        type: Object,
        notify: true,
        observer: '_startDateChanged'
      },
      _startDateDisplay: {
        type: String,
        notify: true
      },
      endDate: {
        type: Object,
        notify: true,
        observer: '_endDateChanged'
      },
      _endDateDisplay: {
        type: String,
        notify: true
      },
      titleFilter: {
        type: Object,
        notify: true,
        observer: '_filterChanged'
      },
      sectionFilter: {
        type: Object,
        notify: true,
        observer: '_filterChanged'
      },
      searchType: {
        type: String,
        value: 'type-media',
        notify: true,
        observer: '_changeSearchType'
      },

      _dateValueSelected: {
        type: Boolean,
        value: false
      },

      selectedTitles: {
        type: Array,
        value: []
      },

      selectedSections: {
        type: Array,
        value: []
      },

      _showArticleParameters: {
        type: Boolean,
        value: false,
        notify: true
      },
      _showClearValues: {
        type: Boolean,
        value: false,
        notify: true
      },
      _dialogOpened: {
        type: Boolean,
        value: false,
        notify: true,
        observer: '_openedChanged'
      },
      _for: {
        type: String,
        value: undefined
      },
      target: {
        type: Object,
        value: function value() {
          var target = this.$.wrapper;
          console.log('target: ', target);
          return target;
        },
        notify: true
      }
    },

    titleSelected: function titleSelected() {
      return {
        onSelect: function onSelect(title) {
          console.log('titleSelected: ', title);
          app.bootstrap.fetchEditions(title);
        }
      };
    },

    get titles() {
      return this.selectedTitles;
    },

    get sections() {
      return this.selectedSections;
    },

    _changeSearchType: function _changeSearchType(newSearchType) {
      console.log('change search type: ', newSearchType);
      this._showArticleParameters = _.isEqual(newSearchType, 'type-article');
    },

    _displayPickerStart: function _displayPickerStart() {
      this._for = 'start';
      this.$.dialog.open();
    },

    _displayPickerEnd: function _displayPickerEnd() {
      this._for = 'end';
      this.$.dialog.open();
    },

    _filterChanged: function _filterChanged(newValue) {
      if (!_.isEmpty(newValue)) {
        this._setDirty();
      }
    },

    _isSearchType: function _isSearchType(type) {
      return _.isEqual(this.searchType, type);
    },

    _openedChanged: function _openedChanged(newValue) {
      if (!newValue && this.$.dialog.closingReason.confirmed) {
        console.log('confirmed: for(%s): ', this._for, this.$.picker.date);
        if (_.isEqual(this._for, 'start')) {
          this.startDate = this.$.picker.date;
        } else if (_.isEqual(this._for, 'end')) {
          this.endDate = this.$.picker.date;
        }
      }
    },

    _clearValues: function _clearValues() {
      this.startDate = this.endDate = this._startDateDisplay = this._endDateDisplay = undefined;
      this.titleFilter = this.sectionFilter = undefined;
      this.set('_showClearValues', false);
    },

    _setDirty: function _setDirty() {
      if (!this._showClearValues) {
        this.set('_showClearValues', true);
      }
    },

    _startDateChanged: function _startDateChanged(newValue) {
      if (_.isDate(newValue)) {
        this.startDate = newValue;
        this._startDateDisplay = newValue.toDateString();
        if (_.isUndefined(this.endDate)) {
          this.endDate = newValue;
        }
        this._setDirty();
      } else {
        this.startDate = undefined;
      }
    },

    _endDateChanged: function _endDateChanged(newValue) {
      if (_.isDate(newValue)) {
        this.endDate = newValue;
        this._endDateDisplay = newValue.toDateString();
        this._setDirty();
      } else {
        this.endDate = undefined;
      }
    },

    _fireSearch: function _fireSearch() {
      this.fire('iron-signal', {
        name: 'do-search',
        data: 'ping'
      });
    }
  });
})();
//# sourceMappingURL=data:application/json;base64,
